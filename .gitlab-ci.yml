variables:
  # App settings
  LMS_URL: example.com
  LMS_PASSWORD: admin
  DEPARTMENT: MASS APOCRIF
  FILES_ROOT: /app
  DEBUG: 'no'
  LOCALE: C.UTF-8
  BRAND: Interception Intersception

  # Database settings
  POSTGRES_DB: test_smiap
  POSTGRES_USER: postgres
  POSTGRES_HOST: postgres
  POSTGRES_PORT: 5432
  POSTGRES_PASSWORD: postgres

  # System environment variables
  LANG: $LOCALE
  LANGUAGE: en_US:en
#  LC_ALL: $LANG

  # Ansible variables
  ANSIBLE_FORKS: 2
  ANSIBLE_PIPELINING: 'True'
  ANSIBLE_STRATEGY: 'free'
  ANSIBLE_HOST_KEY_CHECKING: 'False'

  # Pipenv settings
  PIPENV_SYSTEM: 1

stages:
  - build
  - deploy

build:
  stage: build
  image: docker:19.03.12
  services:
    - docker:19.03.12-dind
  variables:
    DOCKER_HOST: tcp://docker:2376
    DOCKER_TLS_CERTDIR: "/certs"
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker pull $CI_REGISTRY_IMAGE:latest || true
    - docker build --cache-from $CI_REGISTRY_IMAGE:latest --tag $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA --tag $CI_REGISTRY_IMAGE:latest .
    - docker run -e ENV=testing $CI_REGISTRY_IMAGE:latest make lint
    - docker run -e ENV=testing $CI_REGISTRY_IMAGE:latest make test
    - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
    - docker push $CI_REGISTRY_IMAGE:latest

deploy:
  image: willhallonline/ansible:alpine
  stage: deploy
  when: on_success
  only:
    - master
  script:
    - cp "$DEPLOY_KEY" id_rsa
    - chmod 600 id_rsa
    - ansible-playbook --syntax-check ansible/playbook.yml -i ansible/hosts
    - ansible-vault decrypt ansible/vault.yml --vault-password-file="$VAULT_PASSWORD"
    - ansible-vault decrypt ansible/group_vars/*.yml --vault-password-file="$VAULT_PASSWORD"
    - ansible-playbook -l all -i ansible/hosts --key-file id_rsa --extra-vars '@ansible/vault.yml' ansible/playbook.yml
