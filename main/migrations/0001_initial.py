# Generated by Django 2.2 on 2019-08-01 13:44

import django.contrib.auth.models
import django.contrib.auth.validators
import django.contrib.postgres.fields.jsonb
from django.db import migrations, models
import django.db.models.deletion
import django.db.models.expressions
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='Group',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=25, unique=True)),
                ('course', models.PositiveSmallIntegerField(editable=False)),
                ('degree', models.PositiveSmallIntegerField(editable=False)),
                ('semester', models.PositiveSmallIntegerField()),
                ('study_form', models.CharField(max_length=12)),
                ('schedule', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
            ],
            options={
                'required_db_vendor': 'postgresql',
            },
        ),
        migrations.CreateModel(
            name='News',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('date', models.DateTimeField()),
                ('url', models.CharField(blank=True, default='', max_length=60)),
                ('img', models.ImageField(blank=True, default='', max_length=120, upload_to='')),
                ('description', models.TextField()),
                ('text', models.TextField()),
                ('hidden', models.BooleanField(default=True)),
            ],
            options={
                'verbose_name_plural': 'News',
                'ordering': ['-pk'],
            },
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('lastname', models.CharField(max_length=30)),
                ('firstname', models.CharField(max_length=30)),
                ('middlename', models.CharField(max_length=30)),
                ('img', models.ImageField(blank=True, default=None, max_length=60, null=True, upload_to='images/lecturers')),
            ],
        ),
        migrations.CreateModel(
            name='Staff',
            fields=[
                ('profile_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='main.Profile')),
                ('regalia', models.CharField(max_length=60)),
                ('description', models.TextField(blank=True, default=None, null=True)),
                ('leader', models.BooleanField(default=False)),
                ('lecturer', models.BooleanField(default=True)),
                ('hide', models.BooleanField(default=True)),
            ],
            options={
                'verbose_name_plural': 'Staff',
                'ordering': [django.db.models.expressions.OrderBy(django.db.models.expressions.F('leader'), descending=True), django.db.models.expressions.OrderBy(django.db.models.expressions.F('lecturer'), descending=True), django.db.models.expressions.OrderBy(django.db.models.expressions.F('hide')), django.db.models.expressions.OrderBy(django.db.models.expressions.F('lastname')), django.db.models.expressions.OrderBy(django.db.models.expressions.F('firstname')), django.db.models.expressions.OrderBy(django.db.models.expressions.F('middlename')), django.db.models.expressions.OrderBy(django.db.models.expressions.F('pk'))],
            },
            bases=('main.profile',),
        ),
        migrations.CreateModel(
            name='Student',
            fields=[
                ('profile_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='main.Profile')),
                ('group_name', models.CharField(max_length=50)),
            ],
            bases=('main.profile',),
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
